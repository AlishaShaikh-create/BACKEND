MOONGODB

The Shell 

mongosh --> to start the Shell

use college --> to create & use a new database called 

--> mongodb recognizes the javascript code
so if we can  perform few basic operations 1+2 and few string operations

-> bydefault moongodb create the temporary database and its name is " test ".

-> the basic database which is already created is 
->admin 
-> local 
-> text

-> The basic hierarchy of the database in the moongodb is  
  ->database 
      |-> Collection
           |-> document [ Each individual data of a person ]

-> to use the database 
command: use <database name>

use college --> to create & use a new database called "college"
--> If college databse exist then we will go inside that database or else new database will get created with the name college

--> db command help use to know in which database we are 

//Data Insertion in moongodb

BSON DATA:

Difference between BSON and JSON data

JSON                                 BSON(Binary)
-> text based format             -> Binary data
-> Space ineffficient            ->Encoding Binary
-> less data types

--> mongodb stores the data in the BSON format.


COLLECTION:

-> Document: Mongo stores data in form of document (BSON docs)

-> document have key value pair 
   {
    name:"alisha"
     email:"alisha@gmail.com"
   }

-> Collection : MongoDb stores document in Collection.

->db.collection.inserOne( { }) --> insert the single document into a collection.

Output:

{
	"acknowledged" : true, --> that means that the moongodb has find
	"insertedId" : ObjectId  ("68d578fe7630977964d43498")  --> its like the primary key.
}

To inser many data :
db.collectionName.insertMany([{},{},{}])

Example:
  --> 
  db.employees.insertMany([
  {empId: 1, name: 'Clark', dept: 'Sales' },
  {empId: 2, name: 'Dave', dept: 'Accounting' },
  {empId: 3, name: 'Ava', dept: 'Sales' }
]);


--> db.collection.find()  --> to find the data of the collection

Example:

db.employees.insertMany([
  {empId: 1, name: 'Clark', dept: 'Sales' },
  {empId: 2, name: 'Dave', dept: 'Accounting' },
  {empId: 3, name: 'Ava', dept: 'Sales' }
]);

db.employees.insertOne({name:"Alisha" ,age:23})

db.employees.find()


OUTPUT:
{
	"acknowledged" : true,
	"insertedIds" : [
		ObjectId("68d579fe2e2ad155d1f326cc"),
		ObjectId("68d579fe2e2ad155d1f326cd"),
		ObjectId("68d579fe2e2ad155d1f326ce")
	]
}
{
	"acknowledged" : true,
	"insertedId" : ObjectId("68d579fe2e2ad155d1f326cf")
}
{ "_id" : ObjectId("68d579fe2e2ad155d1f326cc"), "empId" : 1, "name" : "Clark", "dept" : "Sales" }
{ "_id" : ObjectId("68d579fe2e2ad155d1f326cd"), "empId" : 2, "name" : "Dave", "dept" : "Accounting" }
{ "_id" : ObjectId("68d579fe2e2ad155d1f326ce"), "empId" : 3, "name" : "Ava", "dept" : "Sales" }

--> if the collection does not exist then it automatically creates the collection. 

FOR EXAMPLE:
  db.student.insertOne({ "name" : "Ava", "dept" : "Sales" })
  
--> if student collection doesnot exist then it create the new collection called student.